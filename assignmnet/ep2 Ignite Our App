1. NPM: npm is node package managerl it describe the configuration & dependecny install in our project; it is a default node package manager; we can create a the configuration by writing `npm init` and describe about the project, in will create a package.json file that contain project dependency and configuration; we can install any depecndey by doing `npm install ${package_name}`. it will keep track of the package version & it will also create `package-lock.json` file the lock ther exact version of the depecndency install and also keep track of the exact version of transitive depedency (dep. depend on other dep.); push both file to git; so to keep track of the version ;if someone install the updated version it should be tracked inside the git.

2. Parcel/webpack: these are the bundler tool for js application that need to make our application fast,optimisation,minifed and lot of other stuff to push our code to production. it will bundle all file into a small,optimised and efficient code that can we used to prod.suport HMR (hot module replacement),serve a liver server and instant reload the page when something change in any of the specified file (in the config of parcel & webpack). Webpack is a config based bundeler tool, wheras parcel is zero-config bundler tools.

3. .parcel-cache: it create a folder that have the cached binary file that will bundle the application in less time; it stores intermediate results (such as compiled code, cached modules, and other data) in the cache directory to speed up subsequent builds; reduce the time required to rebuild a project by reusing previously generated results. it will take disk space; and can be deleted; it can be regenerted by bulding our application.

4. npx : it a node package runner; it will not install the package gloablly;if will first check the package install in local bin/node_module found it will execute it if not serch in global dir. if not it will downlaod the package and execute them; it is npm feature that reduce the process of install and then navigating to the path and executing it. also reduce disk-size by not installing the package.

5. tree shaking is an important optimization technique that can significantly reduce the size of a project's final bundle, resulting in faster load times and better performance.Any code that is not used (or "dead code") is then removed from the final bundle.Dynamic imports and other runtime code cannot be tree-shaken.

6. Hot Module Replacement: eature of modern JavaScript bundlers that will reload the pages when there is a change in the file; it watch our files changes;the bundler watches for changes in the source code and injects the updated code into the running application, without reloading the entire page

7. parcel :- 1. instant server setup, 2.HMR, 3.minified,4.image optimization,5.tree-shaking.

8. .gitignore the file that contain the list of file or dir that we don't want to push on github;anything that can be regenerated need not to be pushed on github.list of file that not to push in tracking file change :
   ` compiled code, logs, cache files, and build output directories;Configuration files;log files`

9. package.json vs package-lock.json: package json file contain the confiration and depecndecy and their approximate version ;it is need as it contain all the configation & dependedcy ; so in future if someone clone the repo ; by doing `npm i` it will install the listed dependency
   lock.json it track of exact version and the dependecny tree. it avoid in version issue by keeping track of exact version;This ensures that the same dependency versions are installed across all machines that are running the project, which helps to avoid "dependency hell"
   ** `good practice to always commit and push package-lock.json` whenever you modify package.json or update any dependencies, to ensure consistency and avoid any issues with different versions of dependencies being installed by different team members.**

10. not modify lock.json file: as it keep track of the exact dependecy and the list of the dependecy that are need for other packages (transitive dependecy) modifying it will cause error;if you modify the package-lock.json file manually, it can cause conflicts and inconsistencies with the dependencies installed on other machines. It can also result in unexpected behavior or errors when running npm install.

11. node_modules: it like a database that contain all the code that our dependecy needed and also contain the code of transitive depencey; it like ad database of depedency install; it can regenerated by doing `npm i`; it download the packages from the internet and save them in the node_modules directory. so no need to push on git as it large in size. problem caused by pushing node_modules: `Slowing down repository cloning;Consuming storage space;commits harder to review`; other devs. can run `npm i` & install the depedency listed in package.json & lock.json.

12. dist directory: it conatain the minified,optimsation;compressed & only conatain 3 files (imp) and map files; it is generated by bundler tools & exluded from version control as it can be regenerated by the bundler tools; it can be gernerated by both running build cmd or develoment cmd (`parcel build index.html` or `parcel index.html`).

13. browserlists: it is a package already support from parcel that can be used to list down the broswer support; mean how old much old browser version this application should support; it also contain support geographic wise & browser availble in the market.

14. vite,webpack & parcel: all these are js bunlder; they do similar thing but have different algorithm of doing these thing; webpack is a configation based bunlder; vite is a fast, lightweighted , instant server support; parcel: is config less bundler it auto detect the file and support more feature as HMR,caching,tree-shaking,code-spilitting and lot more.

15. ^ caret & ~ tilde: - these are sermetic versioning symbol that is provided to install the minor or patch update when install, caret is default symbol as used it update whenever any patch(bug fixes) or minor features update; tilde will update when only patch update are available. It will not update to major version even if it available.

16. script types: script are normal regular js file that are used to add dynamic behaviour to webpage; that doesn't support import & export feature, provide `type=module`;make js as a module that can share and reuse code by using (importing & exporting) ; but it will work on supported browser; some old browser not support module(so provide fallback)`nomodule` it tell that excute the below script if it not support type module
